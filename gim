#!/usr/bin/env python3

# Create Vim sessions with automatic pane/tab layouts from git-status

# Copyright (c) 2013  Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

try:
    from colors import green, red
except ImportError:
    green = red = lambda x: x

import subprocess
import sys


def statuslist():
    ls = subprocess.check_output(['git', 'status', '--short']) \
        .decode('UTF-8', errors='strict').split('\n')[:-1]

    ret = []
    n = 0
    for i in ls:
        if 'M' in i[:2] or 'A' in i[:2]:
            n += 1
            ret.append((n, green(i[0]), red(i[1]), i[3:]))
        elif 'R' in i[:2]:
            n += 1
            ret.append((n, green('R'), red(i[1]), i[3:].split()[2]))
    return ret


def vimargs(files):
    VIM_EXEC = 'vim'
    n = len(files)

    if n == 1:
        ret = [VIM_EXEC]
    elif n == 2:
        cols = int(subprocess.check_output(['tput', 'cols'])
                   .decode('ascii', errors='strict'))
        if cols < 80:
            ret = [VIM_EXEC, '-p']
        elif cols < 191:
            ret = [VIM_EXEC, '-o']
        else:
            ret = [VIM_EXEC, '-O']
    else:
        ret = [VIM_EXEC, '-p']
    return ret + files


def main():
    git_status = statuslist()

    if not git_status:
        return 0

    padding = 2 if len(git_status) > 9 else 1
    for i in git_status:
        print('{0:{p}} {1}{2} {3}'.format(i[0], i[1], i[2], i[3], p=padding))

    inp = input('\nSelect files to edit [{0}]: '.format(red(git_status[0][3])))
    if not inp:
        inp = '1'

    files = []
    for i in inp.split():
        try:
            files.append(git_status[int(i) - 1][3])
        except (IndexError, ValueError):
            pass
    if files:
        try:
            subprocess.call(vimargs(files))
        except IOError as e:
            print(e)
            return e.errno

if __name__ == "__main__":
    try:
        sys.exit(main())
    except (KeyboardInterrupt, EOFError):
        sys.exit(0)
